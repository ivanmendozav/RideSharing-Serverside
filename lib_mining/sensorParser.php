<?php
include_once "MySql.php";
/**
 * Parser for CSV files generated by a sensor
 */
abstract class sensorParser{
    private $filename;
    private $username;
    private $uploads_dir;
    /**
     * Initialize filename
     * @param type $filename
     */
    public function __construct($filename, $username) {
        $this->filename = $filename;
        $this->username = $username;
    }
    /**
     * Specify search path for files
     * @param type $dir
     */
    public function setDir($dir){
        $this->uploads_dir = $dir;
    }    
    
    /**
     * Parse CSV and store in Database
     */
    public function parse(){
        if($this->filename){        
            try{
                $user_id = $this->checkUser($this->username);
                $db = new MySQL(DB_NAME, DB_USER, DB_PASSWORD);
                //echo "Connecting to ".DB_NAME.",".DB_USER.",".DB_PASSWORD;
                if($db->lastError){
                throw new Exception ("Couldn't connect to ".DB_NAME.",".DB_USER.",".DB_PASSWORD);}
                    
                $filename = $this->filename;
                $uploads_dir = $this->uploads_dir;
                if (($handle = fopen("$uploads_dir/$filename", "r")) !== FALSE) {
                    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {  
                        $this->parseLine($db,$data, $user_id);     
                    }                    
                }
                fclose($handle);
                unlink("$uploads_dir/$filename");
                $db->commit();
                $db->closeConnection();
                echo $this->filename." uploaded OK!";
            }
            catch(Exception $e){
                echo "ERROR decoding file".$this->filename." : ".$e->getMessage();
                if(!is_null($db)){
                    $db->rollback();
                    $db->closeConnection();                    
                }
            }
        }
        else{
            echo "File not found:".$this->filename;}
    }
    /**
     * To be implemented for each type of sensor (instructions to parse each line)
     */
    abstract protected function parseLine($db,$data, $username);
    
    protected function checkUser($username){
        $this->db = new MySQL(DB_NAME, DB_USER, DB_PASSWORD);
        $user = $this->db->select("users", array("username" => "$username"));
        if($user["id"])
            return $user["id"];
        else
            return ANONYMOUS_ID;
    }
}