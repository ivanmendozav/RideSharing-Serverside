<?php
include_once "MySql.php";
include_once "DbAdapter.php";
include_once "mining/DataMapper.php";

/**
 * Parser for CSV files generated by a sensor
 */
abstract class sensorParser{
    protected $filename;
    protected $username;
    protected $uploads_dir;
    /**
     * Initialize filename
     * @param type $filename
     */
    public function __construct($filename, $username) {
        $this->filename = $filename;
        $this->username = $username;
        $this->uploads_dir = UPLOAD_DIR;
    }
    /**
     * Specify search path for files
     * @param type $dir
     */
    public function setDir($dir){
        $this->uploads_dir = $dir;
    }    
    
   /**
    * Parse CSV and store in Database
    * Optionally returns the user id of the received username
    * @param bool $eraseFiles If true call manually to eraseFiles
    * @return int
    * @throws Exception
    */
    public function parse($eraseFiles = true){
        $user_id = "1";
        if($this->filename){        
            try{
                $user_id = DataMapper::checkUser($this->username);
                $db = new MySQL(DB_NAME, DB_USER, DB_PASSWORD);
                //echo DB_NAME. DB_USER. DB_PASSWORD;
                if($db->lastError){
                throw new Exception ("Couldn't connect to ".DB_NAME.",".DB_USER.",".DB_PASSWORD);}
                    
                $filename = $this->filename;
                if (($handle = fopen(UPLOAD_DIR."$filename", "r")) !== FALSE) {
                    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {  
                        $this->parseLine($db,$data, $user_id);     
                    }                    
                }
                fclose($handle);
                if($eraseFiles) {$this->eraseFiles($filename);}
                $db->commit();
                $db->closeConnection();
                echo $this->filename." uploaded OK!";
            }
            catch(Exception $e){
                echo "ERROR decoding file".$this->filename." : ".$e->getMessage();
                if(!is_null($db)){
                    $db->rollback();
                    $db->closeConnection();                    
                }
            }
        }
        else{
            echo "File not found:".$this->filename;}
        return $user_id;
    }
    /**
     * To be implemented for each type of sensor (instructions to parse each line)
     */
    abstract protected function parseLine($db,$data, $user_id);    
    
    /**
     * Remove CSV files after using
     * @param String $filename
     */
    protected function eraseFiles($filename){
        unlink(UPLOAD_DIR."$filename");
    }
}